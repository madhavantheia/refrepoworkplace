package org.facebook.products.steps;

import io.cucumber.java.en.Given;
import io.cucumber.java.en.Then;
import io.cucumber.java.en.When;
import org.facebook.products.pages.Home;
import org.facebook.products.pages.DistinctiveLogin;
import org.facebook.products.pages.PasswordSubmission;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.io.FileHandler;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Path;
import java.time.Instant;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.temporal.ChronoUnit;

public class GetIn {

    DistinctiveLogin distinctiveLogin;
    Home home;
    PasswordSubmission passwordSubmission;

    /**
     * Hooks.wait.until(ExpectedConditions.visibilityOfElementLocated(By.linkText(login)));
     * Assert.assertTrue((Hooks.driver.findElement(By.linkText("Log In")).isDisplayed()), "\"Log In\" button is not available");
     * System.out.println(login + " link is available \n");
     *
     * Instantiating Launcher declares loginButton
     * calls super, thereby initElements
     * then Launcher constructor
     * Object for PageObject will not be created thou
     *
     * string in the cucumber catching line should be small letters only
     */

    @Given("I am on SignOn page using {string}")
    public void i_am_on_signon_page_using(String url) throws Exception {
        System.out.println(Instant.now());
        Hooks.driver.get(url);
        System.out.println(Instant.now());
        LocalDateTime datetimeobj = LocalDateTime.now();
        String dtf = datetimeobj.truncatedTo(ChronoUnit.SECONDS).format(DateTimeFormatter.ISO_DATE_TIME);
        String LandingpageShot = "LandingpageShot"+datetimeobj;
        LandingpageShot = LandingpageShot.replaceAll("[^a-zA-Z0-9' ']", "");
        System.out.println("Working Directory = " + System.getProperty("user.dir"));
        String dirName = "Screenshots";
        Files.list(new File(dirName).toPath())
                .limit(10)
                .forEach(path -> {
                    System.out.println(path);
                });
        takeSnapShot(Hooks.driver, ".\\Screenshots\\"+LandingpageShot+".png") ;
        distinctiveLogin = new DistinctiveLogin(Hooks.driver);
        // distinctiveLogin.setEnglishLanguage();
    }

    public static void takeSnapShot(WebDriver driver, String fileWithPath) throws Exception{

        TakesScreenshot scrShot =((TakesScreenshot)driver);
        File SrcFile=scrShot.getScreenshotAs(OutputType.FILE);
        File DestFile=new File(fileWithPath);
        FileHandler.copy(SrcFile, DestFile);
    }

    @Then("Title should be {string}")
    public void title_should_be(String pageTitle) {
        distinctiveLogin.verifyPageTitle(pageTitle);
    }

   /**
     * Hooks.driver.findElement(By.linkText(login)).click();
     *
     * launcher = new Launcher(Hooks.driver);
     * has been removed since its been instantiated already in prior step
     * as a result, in execution logs
     * "pages.PageObject.constructor will not be present this time around
     *
     * Illustration of javadoc comment Tags "param"
     * click on login below
     * you will be taken to respective variable
     * and these tags are auto-generated by IntelliJ
     *
     * try {
     * Assert.assertTrue((Hooks.driver.findElement(By.xpath("//*[@id=\"content\"]/div/div[1]/div/section[1]/div[1]/h1")).isEnabled()),
     * "Heading element is not present");
     * } catch (NoSuchElementException nee) {
     * Hooks.verificationErrors.append(nee.toString());
     * }
     *
     * This try-catch ensures execution proceeds to further steps regardless of Element discovery status
     * Also exception info is appended to String Buffer object
     *
     * Hooks.wait.until(ExpectedConditions.visibilityOfElementLocated(By.name("email")));
     * Hooks.driver.findElement(By.name("email")).clear();
     * Hooks.driver.findElement(By.name("email")).sendKeys(username);
     * Hooks.driver.findElement(By.xpath("//button[@value='1']")).click();
     * or By.className("ibm-btn-pri) or By.className("ibm-btn-blue-50") cause it has 2 classes for this button
     *
     * @param username
     * Parameter from feature file
     */

    @When("I submit my username {string}")
    public void i_submit_my_username(String username) {
        distinctiveLogin = new DistinctiveLogin(Hooks.driver);
        distinctiveLogin.submitUsername(username);
    }

    /**
     * Hooks.driver.findElement(By.name("pass")).sendKeys(pwd);
     * Hooks.driver.findElement(By.id("u_0_9")).click();
     */

    @When("Submit password {string}")
    public void submit_my_password(String password) {
        passwordSubmission = new PasswordSubmission(Hooks.driver);
        passwordSubmission.submitPassword(password);
    }

    /**
     * String newsFeedLabel = Hooks.driver.findElement(By.xpath("//*[@id=\"u_0_1\"]/div/div/div/div/div/div[2]/div[2]/div[2]/header/div/div/div[1]/div[2]/div/h1/span")).getText();
     * System.out.println(newsFeedLabel);
     * try {
     * Assert.assertTrue(newsFeedLabel.contains("News Feed"), "\"News Feed\" not available");
     * } catch (AssertionError ae) {
     * Hooks.verificationErrors.append("\n\n").append(ae.toString());
     * }
     * System.out.println("Last statement in final step; After \"News Feed\" Label Validation");
     *
     * In-case of try-catch last statement always executes irrespective of "News Feed" availability/status
     * Without exception handling, last statement execution depends on "News Feed" availability
     */

    @Then("I should be able to view my News Feed")
    public void i_should_be_able_to_view_my_news_feed() {
        home = new Home(Hooks.driver);
        home.validateNewsFeed();
    }

}
